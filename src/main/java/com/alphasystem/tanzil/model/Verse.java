//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.06.09 at 11:32:37 PM EDT 
//


package com.alphasystem.tanzil.model;

import com.alphasystem.arabic.model.ArabicWord;

import javax.xml.bind.annotation.*;
import java.util.ArrayList;
import java.util.List;

import static com.alphasystem.arabic.model.ArabicWord.concatenateWithSpace;
import static com.alphasystem.arabic.model.ArabicWord.fromUnicode;
import static org.apache.commons.lang3.StringUtils.isBlank;


/**
 * <p>Java class for AyaType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AyaType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *       &lt;/sequence>
 *       &lt;attribute name="verseNumber" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="text" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="bismillah" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlRootElement(name = "aya")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "VerseType")
public class Verse {

    @XmlTransient
    protected Integer chapterNumber;
    @XmlAttribute(name = "index", required = true)
    protected Integer verseNumber;
    @XmlAttribute(required = true)
    protected String text;
    @XmlAttribute
    protected String bismillah;
    @XmlTransient
    protected ArabicWord verse;
    @XmlTransient
    protected List<ArabicWord> tokens;

    /**
     *
     * @return
     */
    public Integer getChapterNumber() {
        return chapterNumber;
    }

    /**
     *
     * @param chapterNumber
     */
    public void setChapterNumber(Integer chapterNumber) {
        this.chapterNumber = chapterNumber;
    }

    /**
     * Gets the value of the verseNumber property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getVerseNumber() {
        return verseNumber;
    }

    /**
     * Sets the value of the verseNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setVerseNumber(Integer value) {
        this.verseNumber = value;
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setText(String value) {
        this.text = value;
    }

    /**
     * Gets the value of the bismillah property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBismillah() {
        return bismillah;
    }

    /**
     * Sets the value of the bismillah property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBismillah(String value) {
        this.bismillah = value;
    }

    public ArabicWord getVerse() {
        return verse;
    }

    public void setVerse(ArabicWord verse) {
        this.verse = verse;
    }

    public List<ArabicWord> getTokens() {
        if (tokens == null) {
            loadTokens();
        }
        return tokens;
    }

    private void loadTokens() {
        tokens = new ArrayList<>();
        String[] _tokens = text.split(" ");
        for (int i = 0; i < _tokens.length; i++) {
            String token = _tokens[i];
            if (isBlank(token)) {
                continue;
            }
            token = token.trim();
            ArabicWord word = fromUnicode(token);
            if (token.length() == 1) {
                // one of punctuation character
                // logic is to merge punctuation with the previous token,
                // but if it is the first token then merge it with next token
                if (i == 0) {
                    String nextToken = _tokens[++i].trim();
                    if (nextToken.length() == 1) {
                        System.out.println(String.format("Two punctuation together??? For CN: %s, VN: %s",
                                getChapterNumber(), getVerseNumber()));
                    }
                    tokens.add(concatenateWithSpace(word, fromUnicode(nextToken)));
                } else {
                    int lastIndex = tokens.size() - 1;
                    ArabicWord lastWord = tokens.get(lastIndex);
                    tokens.set(lastIndex, concatenateWithSpace(lastWord, word));
                }
            } else {
                tokens.add(word);
            }
        }
    }

    public Verse withVerseNumber(Integer value) {
        setVerseNumber(value);
        return this;
    }

    public Verse withText(String value) {
        setText(value);
        return this;
    }

    public Verse withBismillah(String value) {
        setBismillah(value);
        return this;
    }

}
